//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentItMvc.RentItService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Channel", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class Channel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] GenresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreamUriField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Genres {
            get {
                return this.GenresField;
            }
            set {
                if ((object.ReferenceEquals(this.GenresField, value) != true)) {
                    this.GenresField = value;
                    this.RaisePropertyChanged("Genres");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Hits {
            get {
                return this.HitsField;
            }
            set {
                if ((this.HitsField.Equals(value) != true)) {
                    this.HitsField = value;
                    this.RaisePropertyChanged("Hits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreamUri {
            get {
                return this.StreamUriField;
            }
            set {
                if ((object.ReferenceEquals(this.StreamUriField, value) != true)) {
                    this.StreamUriField = value;
                    this.RaisePropertyChanged("StreamUri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelSearchArgs", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU")]
    [System.SerializableAttribute()]
    public partial class ChannelSearchArgs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] GenresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HitsAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HitsDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxAmountPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxNumberOfCommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxNumberOfSubscriptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxTotalVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinAmountPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinNumberOfCommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinNumberOfSubscriptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinTotalVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberOfCommentsAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberOfCommentsDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberOfVotesAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberOfVotesDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SortOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriptionsAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriptionsDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndIndex {
            get {
                return this.EndIndexField;
            }
            set {
                if ((this.EndIndexField.Equals(value) != true)) {
                    this.EndIndexField = value;
                    this.RaisePropertyChanged("EndIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Genres {
            get {
                return this.GenresField;
            }
            set {
                if ((object.ReferenceEquals(this.GenresField, value) != true)) {
                    this.GenresField = value;
                    this.RaisePropertyChanged("Genres");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HitsAsc {
            get {
                return this.HitsAscField;
            }
            set {
                if ((object.ReferenceEquals(this.HitsAscField, value) != true)) {
                    this.HitsAscField = value;
                    this.RaisePropertyChanged("HitsAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HitsDesc {
            get {
                return this.HitsDescField;
            }
            set {
                if ((object.ReferenceEquals(this.HitsDescField, value) != true)) {
                    this.HitsDescField = value;
                    this.RaisePropertyChanged("HitsDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxAmountPlayed {
            get {
                return this.MaxAmountPlayedField;
            }
            set {
                if ((this.MaxAmountPlayedField.Equals(value) != true)) {
                    this.MaxAmountPlayedField = value;
                    this.RaisePropertyChanged("MaxAmountPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumberOfComments {
            get {
                return this.MaxNumberOfCommentsField;
            }
            set {
                if ((this.MaxNumberOfCommentsField.Equals(value) != true)) {
                    this.MaxNumberOfCommentsField = value;
                    this.RaisePropertyChanged("MaxNumberOfComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumberOfSubscriptions {
            get {
                return this.MaxNumberOfSubscriptionsField;
            }
            set {
                if ((this.MaxNumberOfSubscriptionsField.Equals(value) != true)) {
                    this.MaxNumberOfSubscriptionsField = value;
                    this.RaisePropertyChanged("MaxNumberOfSubscriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxTotalVotes {
            get {
                return this.MaxTotalVotesField;
            }
            set {
                if ((this.MaxTotalVotesField.Equals(value) != true)) {
                    this.MaxTotalVotesField = value;
                    this.RaisePropertyChanged("MaxTotalVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinAmountPlayed {
            get {
                return this.MinAmountPlayedField;
            }
            set {
                if ((this.MinAmountPlayedField.Equals(value) != true)) {
                    this.MinAmountPlayedField = value;
                    this.RaisePropertyChanged("MinAmountPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinNumberOfComments {
            get {
                return this.MinNumberOfCommentsField;
            }
            set {
                if ((this.MinNumberOfCommentsField.Equals(value) != true)) {
                    this.MinNumberOfCommentsField = value;
                    this.RaisePropertyChanged("MinNumberOfComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinNumberOfSubscriptions {
            get {
                return this.MinNumberOfSubscriptionsField;
            }
            set {
                if ((this.MinNumberOfSubscriptionsField.Equals(value) != true)) {
                    this.MinNumberOfSubscriptionsField = value;
                    this.RaisePropertyChanged("MinNumberOfSubscriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinTotalVotes {
            get {
                return this.MinTotalVotesField;
            }
            set {
                if ((this.MinTotalVotesField.Equals(value) != true)) {
                    this.MinTotalVotesField = value;
                    this.RaisePropertyChanged("MinTotalVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameAsc {
            get {
                return this.NameAscField;
            }
            set {
                if ((object.ReferenceEquals(this.NameAscField, value) != true)) {
                    this.NameAscField = value;
                    this.RaisePropertyChanged("NameAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameDesc {
            get {
                return this.NameDescField;
            }
            set {
                if ((object.ReferenceEquals(this.NameDescField, value) != true)) {
                    this.NameDescField = value;
                    this.RaisePropertyChanged("NameDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberOfCommentsAsc {
            get {
                return this.NumberOfCommentsAscField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberOfCommentsAscField, value) != true)) {
                    this.NumberOfCommentsAscField = value;
                    this.RaisePropertyChanged("NumberOfCommentsAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberOfCommentsDesc {
            get {
                return this.NumberOfCommentsDescField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberOfCommentsDescField, value) != true)) {
                    this.NumberOfCommentsDescField = value;
                    this.RaisePropertyChanged("NumberOfCommentsDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberOfVotesAsc {
            get {
                return this.NumberOfVotesAscField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberOfVotesAscField, value) != true)) {
                    this.NumberOfVotesAscField = value;
                    this.RaisePropertyChanged("NumberOfVotesAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberOfVotesDesc {
            get {
                return this.NumberOfVotesDescField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberOfVotesDescField, value) != true)) {
                    this.NumberOfVotesDescField = value;
                    this.RaisePropertyChanged("NumberOfVotesDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchString {
            get {
                return this.SearchStringField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchStringField, value) != true)) {
                    this.SearchStringField = value;
                    this.RaisePropertyChanged("SearchString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SortOption {
            get {
                return this.SortOptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SortOptionField, value) != true)) {
                    this.SortOptionField = value;
                    this.RaisePropertyChanged("SortOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartIndex {
            get {
                return this.StartIndexField;
            }
            set {
                if ((this.StartIndexField.Equals(value) != true)) {
                    this.StartIndexField = value;
                    this.RaisePropertyChanged("StartIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriptionsAsc {
            get {
                return this.SubscriptionsAscField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriptionsAscField, value) != true)) {
                    this.SubscriptionsAscField = value;
                    this.RaisePropertyChanged("SubscriptionsAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriptionsDesc {
            get {
                return this.SubscriptionsDescField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriptionsDescField, value) != true)) {
                    this.SubscriptionsDescField = value;
                    this.RaisePropertyChanged("SubscriptionsDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class Comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PostTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((this.ChannelIdField.Equals(value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PostTime {
            get {
                return this.PostTimeField;
            }
            set {
                if ((this.PostTimeField.Equals(value) != true)) {
                    this.PostTimeField = value;
                    this.RaisePropertyChanged("PostTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DownVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UpVotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((this.ChannelIdField.Equals(value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DownVotes {
            get {
                return this.DownVotesField;
            }
            set {
                if ((this.DownVotesField.Equals(value) != true)) {
                    this.DownVotesField = value;
                    this.RaisePropertyChanged("DownVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UpVotes {
            get {
                return this.UpVotesField;
            }
            set {
                if ((this.UpVotesField.Equals(value) != true)) {
                    this.UpVotesField = value;
                    this.RaisePropertyChanged("UpVotes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vote", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class Vote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrackIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime VoteTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackId {
            get {
                return this.TrackIdField;
            }
            set {
                if ((this.TrackIdField.Equals(value) != true)) {
                    this.TrackIdField = value;
                    this.RaisePropertyChanged("TrackId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime VoteTime {
            get {
                return this.VoteTimeField;
            }
            set {
                if ((this.VoteTimeField.Equals(value) != true)) {
                    this.VoteTimeField = value;
                    this.RaisePropertyChanged("VoteTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Genre", Namespace="http://schemas.datacontract.org/2004/07/RentItServer.ITU.DatabaseWrapperObjects")]
    [System.SerializableAttribute()]
    public partial class Genre : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RentItService.IRentItService")]
    public interface IRentItService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Login", ReplyAction="http://tempuri.org/IRentItService/LoginResponse")]
        RentItMvc.RentItService.User Login(string usernameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Login", ReplyAction="http://tempuri.org/IRentItService/LoginResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> LoginAsync(string usernameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/SignUp", ReplyAction="http://tempuri.org/IRentItService/SignUpResponse")]
        RentItMvc.RentItService.User SignUp(string usernameOrEmail, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/SignUp", ReplyAction="http://tempuri.org/IRentItService/SignUpResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> SignUpAsync(string usernameOrEmail, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetUser", ReplyAction="http://tempuri.org/IRentItService/GetUserResponse")]
        RentItMvc.RentItService.User GetUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetUser", ReplyAction="http://tempuri.org/IRentItService/GetUserResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> GetUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsCorrectPassword", ReplyAction="http://tempuri.org/IRentItService/IsCorrectPasswordResponse")]
        bool IsCorrectPassword(int userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsCorrectPassword", ReplyAction="http://tempuri.org/IRentItService/IsCorrectPasswordResponse")]
        System.Threading.Tasks.Task<bool> IsCorrectPasswordAsync(int userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateUser", ReplyAction="http://tempuri.org/IRentItService/UpdateUserResponse")]
        void UpdateUser(int userId, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateUser", ReplyAction="http://tempuri.org/IRentItService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(int userId, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateChannel", ReplyAction="http://tempuri.org/IRentItService/CreateChannelResponse")]
        int CreateChannel(string channelName, int userId, string description, string[] genres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateChannel", ReplyAction="http://tempuri.org/IRentItService/CreateChannelResponse")]
        System.Threading.Tasks.Task<int> CreateChannelAsync(string channelName, int userId, string description, string[] genres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteChannel", ReplyAction="http://tempuri.org/IRentItService/DeleteChannelResponse")]
        void DeleteChannel(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteChannel", ReplyAction="http://tempuri.org/IRentItService/DeleteChannelResponse")]
        System.Threading.Tasks.Task DeleteChannelAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateChannel", ReplyAction="http://tempuri.org/IRentItService/UpdateChannelResponse")]
        void UpdateChannel(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateChannel", ReplyAction="http://tempuri.org/IRentItService/UpdateChannelResponse")]
        System.Threading.Tasks.Task UpdateChannelAsync(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannel", ReplyAction="http://tempuri.org/IRentItService/GetChannelResponse")]
        RentItMvc.RentItService.Channel GetChannel(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannel", ReplyAction="http://tempuri.org/IRentItService/GetChannelResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel> GetChannelAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannels", ReplyAction="http://tempuri.org/IRentItService/GetChannelsResponse")]
        RentItMvc.RentItService.Channel[] GetChannels(RentItMvc.RentItService.ChannelSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannels", ReplyAction="http://tempuri.org/IRentItService/GetChannelsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetChannelsAsync(RentItMvc.RentItService.ChannelSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateVote", ReplyAction="http://tempuri.org/IRentItService/CreateVoteResponse")]
        void CreateVote(int rating, int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateVote", ReplyAction="http://tempuri.org/IRentItService/CreateVoteResponse")]
        System.Threading.Tasks.Task CreateVoteAsync(int rating, int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/AddTrack", ReplyAction="http://tempuri.org/IRentItService/AddTrackResponse")]
        void AddTrack(int userId, int channelId, System.IO.MemoryStream audioStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/AddTrack", ReplyAction="http://tempuri.org/IRentItService/AddTrackResponse")]
        System.Threading.Tasks.Task AddTrackAsync(int userId, int channelId, System.IO.MemoryStream audioStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/RemoveTrack", ReplyAction="http://tempuri.org/IRentItService/RemoveTrackResponse")]
        void RemoveTrack(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/RemoveTrack", ReplyAction="http://tempuri.org/IRentItService/RemoveTrackResponse")]
        System.Threading.Tasks.Task RemoveTrackAsync(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateComment", ReplyAction="http://tempuri.org/IRentItService/CreateCommentResponse")]
        void CreateComment(string comment, int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateComment", ReplyAction="http://tempuri.org/IRentItService/CreateCommentResponse")]
        System.Threading.Tasks.Task CreateCommentAsync(string comment, int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannelComments", ReplyAction="http://tempuri.org/IRentItService/GetChannelCommentsResponse")]
        RentItMvc.RentItService.Comment[] GetChannelComments(int channelId, System.Nullable<int> fromInclusive, System.Nullable<int> toExclusive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannelComments", ReplyAction="http://tempuri.org/IRentItService/GetChannelCommentsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Comment[]> GetChannelCommentsAsync(int channelId, System.Nullable<int> fromInclusive, System.Nullable<int> toExclusive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsEmailAvailable", ReplyAction="http://tempuri.org/IRentItService/IsEmailAvailableResponse")]
        bool IsEmailAvailable(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsEmailAvailable", ReplyAction="http://tempuri.org/IRentItService/IsEmailAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsEmailAvailableAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsUsernameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsUsernameAvailableResponse")]
        bool IsUsernameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsUsernameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsUsernameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subscribe", ReplyAction="http://tempuri.org/IRentItService/SubscribeResponse")]
        void Subscribe(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subscribe", ReplyAction="http://tempuri.org/IRentItService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Unsubscribe", ReplyAction="http://tempuri.org/IRentItService/UnsubscribeResponse")]
        void Unsubscribe(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Unsubscribe", ReplyAction="http://tempuri.org/IRentItService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/StartChannelStream", ReplyAction="http://tempuri.org/IRentItService/StartChannelStreamResponse")]
        void StartChannelStream(int cId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/StartChannelStream", ReplyAction="http://tempuri.org/IRentItService/StartChannelStreamResponse")]
        System.Threading.Tasks.Task StartChannelStreamAsync(int cId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetDefaultChannelSearchArgs", ReplyAction="http://tempuri.org/IRentItService/GetDefaultChannelSearchArgsResponse")]
        RentItMvc.RentItService.ChannelSearchArgs GetDefaultChannelSearchArgs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetDefaultChannelSearchArgs", ReplyAction="http://tempuri.org/IRentItService/GetDefaultChannelSearchArgsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.ChannelSearchArgs> GetDefaultChannelSearchArgsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetCreatedChannels", ReplyAction="http://tempuri.org/IRentItService/GetCreatedChannelsResponse")]
        RentItMvc.RentItService.Channel[] GetCreatedChannels(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetCreatedChannels", ReplyAction="http://tempuri.org/IRentItService/GetCreatedChannelsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetCreatedChannelsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetSubscribedChannels", ReplyAction="http://tempuri.org/IRentItService/GetSubscribedChannelsResponse")]
        RentItMvc.RentItService.Channel[] GetSubscribedChannels(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetSubscribedChannels", ReplyAction="http://tempuri.org/IRentItService/GetSubscribedChannelsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetSubscribedChannelsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackByChannelId", ReplyAction="http://tempuri.org/IRentItService/GetTrackByChannelIdResponse")]
        RentItMvc.RentItService.Track[] GetTrackByChannelId(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackByChannelId", ReplyAction="http://tempuri.org/IRentItService/GetTrackByChannelIdResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetTrackByChannelIdAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetRecentlyPlayedTracks", ReplyAction="http://tempuri.org/IRentItService/GetRecentlyPlayedTracksResponse")]
        RentItMvc.RentItService.Track[] GetRecentlyPlayedTracks(int channelId, int numberOfTracks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetRecentlyPlayedTracks", ReplyAction="http://tempuri.org/IRentItService/GetRecentlyPlayedTracksResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetRecentlyPlayedTracksAsync(int channelId, int numberOfTracks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsChannelNameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsChannelNameAvailableResponse")]
        bool IsChannelNameAvailable(int channelId, string channelName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsChannelNameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsChannelNameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsChannelNameAvailableAsync(int channelId, string channelName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetSubscriberCount", ReplyAction="http://tempuri.org/IRentItService/GetSubscriberCountResponse")]
        int GetSubscriberCount(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetSubscriberCount", ReplyAction="http://tempuri.org/IRentItService/GetSubscriberCountResponse")]
        System.Threading.Tasks.Task<int> GetSubscriberCountAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IncrementChannelPlays", ReplyAction="http://tempuri.org/IRentItService/IncrementChannelPlaysResponse")]
        void IncrementChannelPlays(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IncrementChannelPlays", ReplyAction="http://tempuri.org/IRentItService/IncrementChannelPlaysResponse")]
        System.Threading.Tasks.Task IncrementChannelPlaysAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsChannelPlaying", ReplyAction="http://tempuri.org/IRentItService/IsChannelPlayingResponse")]
        bool IsChannelPlaying(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsChannelPlaying", ReplyAction="http://tempuri.org/IRentItService/IsChannelPlayingResponse")]
        System.Threading.Tasks.Task<bool> IsChannelPlayingAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/StopChannelStream", ReplyAction="http://tempuri.org/IRentItService/StopChannelStreamResponse")]
        void StopChannelStream(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/StopChannelStream", ReplyAction="http://tempuri.org/IRentItService/StopChannelStreamResponse")]
        System.Threading.Tasks.Task StopChannelStreamAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetVote", ReplyAction="http://tempuri.org/IRentItService/GetVoteResponse")]
        RentItMvc.RentItService.Vote GetVote(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetVote", ReplyAction="http://tempuri.org/IRentItService/GetVoteResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Vote> GetVoteAsync(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteVote", ReplyAction="http://tempuri.org/IRentItService/DeleteVoteResponse")]
        void DeleteVote(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteVote", ReplyAction="http://tempuri.org/IRentItService/DeleteVoteResponse")]
        System.Threading.Tasks.Task DeleteVoteAsync(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllChannelsWithFilter", ReplyAction="http://tempuri.org/IRentItService/CountAllChannelsWithFilterResponse")]
        int CountAllChannelsWithFilter(RentItMvc.RentItService.ChannelSearchArgs filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllChannelsWithFilter", ReplyAction="http://tempuri.org/IRentItService/CountAllChannelsWithFilterResponse")]
        System.Threading.Tasks.Task<int> CountAllChannelsWithFilterAsync(RentItMvc.RentItService.ChannelSearchArgs filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllUpvotes", ReplyAction="http://tempuri.org/IRentItService/CountAllUpvotesResponse")]
        int CountAllUpvotes(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllUpvotes", ReplyAction="http://tempuri.org/IRentItService/CountAllUpvotesResponse")]
        System.Threading.Tasks.Task<int> CountAllUpvotesAsync(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllDownvotes", ReplyAction="http://tempuri.org/IRentItService/CountAllDownvotesResponse")]
        int CountAllDownvotes(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CountAllDownvotes", ReplyAction="http://tempuri.org/IRentItService/CountAllDownvotesResponse")]
        System.Threading.Tasks.Task<int> CountAllDownvotesAsync(int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllGenres", ReplyAction="http://tempuri.org/IRentItService/GetAllGenresResponse")]
        RentItMvc.RentItService.Genre[] GetAllGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllGenres", ReplyAction="http://tempuri.org/IRentItService/GetAllGenresResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Genre[]> GetAllGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetGenresForChannel", ReplyAction="http://tempuri.org/IRentItService/GetGenresForChannelResponse")]
        RentItMvc.RentItService.Genre[] GetGenresForChannel(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetGenresForChannel", ReplyAction="http://tempuri.org/IRentItService/GetGenresForChannelResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Genre[]> GetGenresForChannelAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetCountChannelComments", ReplyAction="http://tempuri.org/IRentItService/GetCountChannelCommentsResponse")]
        int GetCountChannelComments(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetCountChannelComments", ReplyAction="http://tempuri.org/IRentItService/GetCountChannelCommentsResponse")]
        System.Threading.Tasks.Task<int> GetCountChannelCommentsAsync(int channelId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRentItServiceChannel : RentItMvc.RentItService.IRentItService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RentItServiceClient : System.ServiceModel.ClientBase<RentItMvc.RentItService.IRentItService>, RentItMvc.RentItService.IRentItService {
        
        public RentItServiceClient() {
        }
        
        public RentItServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RentItMvc.RentItService.User Login(string usernameOrEmail, string password) {
            return base.Channel.Login(usernameOrEmail, password);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> LoginAsync(string usernameOrEmail, string password) {
            return base.Channel.LoginAsync(usernameOrEmail, password);
        }
        
        public RentItMvc.RentItService.User SignUp(string usernameOrEmail, string email, string password) {
            return base.Channel.SignUp(usernameOrEmail, email, password);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> SignUpAsync(string usernameOrEmail, string email, string password) {
            return base.Channel.SignUpAsync(usernameOrEmail, email, password);
        }
        
        public RentItMvc.RentItService.User GetUser(int userId) {
            return base.Channel.GetUser(userId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> GetUserAsync(int userId) {
            return base.Channel.GetUserAsync(userId);
        }
        
        public bool IsCorrectPassword(int userId, string password) {
            return base.Channel.IsCorrectPassword(userId, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsCorrectPasswordAsync(int userId, string password) {
            return base.Channel.IsCorrectPasswordAsync(userId, password);
        }
        
        public void UpdateUser(int userId, string username, string password, string email) {
            base.Channel.UpdateUser(userId, username, password, email);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(int userId, string username, string password, string email) {
            return base.Channel.UpdateUserAsync(userId, username, password, email);
        }
        
        public int CreateChannel(string channelName, int userId, string description, string[] genres) {
            return base.Channel.CreateChannel(channelName, userId, description, genres);
        }
        
        public System.Threading.Tasks.Task<int> CreateChannelAsync(string channelName, int userId, string description, string[] genres) {
            return base.Channel.CreateChannelAsync(channelName, userId, description, genres);
        }
        
        public void DeleteChannel(int channelId) {
            base.Channel.DeleteChannel(channelId);
        }
        
        public System.Threading.Tasks.Task DeleteChannelAsync(int channelId) {
            return base.Channel.DeleteChannelAsync(channelId);
        }
        
        public void UpdateChannel(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating) {
            base.Channel.UpdateChannel(channelId, ownerId, channelName, description, hits, rating);
        }
        
        public System.Threading.Tasks.Task UpdateChannelAsync(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating) {
            return base.Channel.UpdateChannelAsync(channelId, ownerId, channelName, description, hits, rating);
        }
        
        public RentItMvc.RentItService.Channel GetChannel(int channelId) {
            return base.Channel.GetChannel(channelId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel> GetChannelAsync(int channelId) {
            return base.Channel.GetChannelAsync(channelId);
        }
        
        public RentItMvc.RentItService.Channel[] GetChannels(RentItMvc.RentItService.ChannelSearchArgs args) {
            return base.Channel.GetChannels(args);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetChannelsAsync(RentItMvc.RentItService.ChannelSearchArgs args) {
            return base.Channel.GetChannelsAsync(args);
        }
        
        public void CreateVote(int rating, int userId, int trackId) {
            base.Channel.CreateVote(rating, userId, trackId);
        }
        
        public System.Threading.Tasks.Task CreateVoteAsync(int rating, int userId, int trackId) {
            return base.Channel.CreateVoteAsync(rating, userId, trackId);
        }
        
        public void AddTrack(int userId, int channelId, System.IO.MemoryStream audioStream) {
            base.Channel.AddTrack(userId, channelId, audioStream);
        }
        
        public System.Threading.Tasks.Task AddTrackAsync(int userId, int channelId, System.IO.MemoryStream audioStream) {
            return base.Channel.AddTrackAsync(userId, channelId, audioStream);
        }
        
        public void RemoveTrack(int trackId) {
            base.Channel.RemoveTrack(trackId);
        }
        
        public System.Threading.Tasks.Task RemoveTrackAsync(int trackId) {
            return base.Channel.RemoveTrackAsync(trackId);
        }
        
        public void CreateComment(string comment, int userId, int channelId) {
            base.Channel.CreateComment(comment, userId, channelId);
        }
        
        public System.Threading.Tasks.Task CreateCommentAsync(string comment, int userId, int channelId) {
            return base.Channel.CreateCommentAsync(comment, userId, channelId);
        }
        
        public RentItMvc.RentItService.Comment[] GetChannelComments(int channelId, System.Nullable<int> fromInclusive, System.Nullable<int> toExclusive) {
            return base.Channel.GetChannelComments(channelId, fromInclusive, toExclusive);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Comment[]> GetChannelCommentsAsync(int channelId, System.Nullable<int> fromInclusive, System.Nullable<int> toExclusive) {
            return base.Channel.GetChannelCommentsAsync(channelId, fromInclusive, toExclusive);
        }
        
        public bool IsEmailAvailable(string email) {
            return base.Channel.IsEmailAvailable(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailAvailableAsync(string email) {
            return base.Channel.IsEmailAvailableAsync(email);
        }
        
        public bool IsUsernameAvailable(string username) {
            return base.Channel.IsUsernameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username) {
            return base.Channel.IsUsernameAvailableAsync(username);
        }
        
        public void Subscribe(int userId, int channelId) {
            base.Channel.Subscribe(userId, channelId);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int userId, int channelId) {
            return base.Channel.SubscribeAsync(userId, channelId);
        }
        
        public void Unsubscribe(int userId, int channelId) {
            base.Channel.Unsubscribe(userId, channelId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int userId, int channelId) {
            return base.Channel.UnsubscribeAsync(userId, channelId);
        }
        
        public void StartChannelStream(int cId) {
            base.Channel.StartChannelStream(cId);
        }
        
        public System.Threading.Tasks.Task StartChannelStreamAsync(int cId) {
            return base.Channel.StartChannelStreamAsync(cId);
        }
        
        public RentItMvc.RentItService.ChannelSearchArgs GetDefaultChannelSearchArgs() {
            return base.Channel.GetDefaultChannelSearchArgs();
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.ChannelSearchArgs> GetDefaultChannelSearchArgsAsync() {
            return base.Channel.GetDefaultChannelSearchArgsAsync();
        }
        
        public RentItMvc.RentItService.Channel[] GetCreatedChannels(int userId) {
            return base.Channel.GetCreatedChannels(userId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetCreatedChannelsAsync(int userId) {
            return base.Channel.GetCreatedChannelsAsync(userId);
        }
        
        public RentItMvc.RentItService.Channel[] GetSubscribedChannels(int userId) {
            return base.Channel.GetSubscribedChannels(userId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetSubscribedChannelsAsync(int userId) {
            return base.Channel.GetSubscribedChannelsAsync(userId);
        }
        
        public RentItMvc.RentItService.Track[] GetTrackByChannelId(int channelId) {
            return base.Channel.GetTrackByChannelId(channelId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetTrackByChannelIdAsync(int channelId) {
            return base.Channel.GetTrackByChannelIdAsync(channelId);
        }
        
        public RentItMvc.RentItService.Track[] GetRecentlyPlayedTracks(int channelId, int numberOfTracks) {
            return base.Channel.GetRecentlyPlayedTracks(channelId, numberOfTracks);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetRecentlyPlayedTracksAsync(int channelId, int numberOfTracks) {
            return base.Channel.GetRecentlyPlayedTracksAsync(channelId, numberOfTracks);
        }
        
        public bool IsChannelNameAvailable(int channelId, string channelName) {
            return base.Channel.IsChannelNameAvailable(channelId, channelName);
        }
        
        public System.Threading.Tasks.Task<bool> IsChannelNameAvailableAsync(int channelId, string channelName) {
            return base.Channel.IsChannelNameAvailableAsync(channelId, channelName);
        }
        
        public int GetSubscriberCount(int channelId) {
            return base.Channel.GetSubscriberCount(channelId);
        }
        
        public System.Threading.Tasks.Task<int> GetSubscriberCountAsync(int channelId) {
            return base.Channel.GetSubscriberCountAsync(channelId);
        }
        
        public void IncrementChannelPlays(int channelId) {
            base.Channel.IncrementChannelPlays(channelId);
        }
        
        public System.Threading.Tasks.Task IncrementChannelPlaysAsync(int channelId) {
            return base.Channel.IncrementChannelPlaysAsync(channelId);
        }
        
        public bool IsChannelPlaying(int channelId) {
            return base.Channel.IsChannelPlaying(channelId);
        }
        
        public System.Threading.Tasks.Task<bool> IsChannelPlayingAsync(int channelId) {
            return base.Channel.IsChannelPlayingAsync(channelId);
        }
        
        public void StopChannelStream(int channelId) {
            base.Channel.StopChannelStream(channelId);
        }
        
        public System.Threading.Tasks.Task StopChannelStreamAsync(int channelId) {
            return base.Channel.StopChannelStreamAsync(channelId);
        }
        
        public RentItMvc.RentItService.Vote GetVote(int userId, int trackId) {
            return base.Channel.GetVote(userId, trackId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Vote> GetVoteAsync(int userId, int trackId) {
            return base.Channel.GetVoteAsync(userId, trackId);
        }
        
        public void DeleteVote(int userId, int trackId) {
            base.Channel.DeleteVote(userId, trackId);
        }
        
        public System.Threading.Tasks.Task DeleteVoteAsync(int userId, int trackId) {
            return base.Channel.DeleteVoteAsync(userId, trackId);
        }
        
        public int CountAllChannelsWithFilter(RentItMvc.RentItService.ChannelSearchArgs filter) {
            return base.Channel.CountAllChannelsWithFilter(filter);
        }
        
        public System.Threading.Tasks.Task<int> CountAllChannelsWithFilterAsync(RentItMvc.RentItService.ChannelSearchArgs filter) {
            return base.Channel.CountAllChannelsWithFilterAsync(filter);
        }
        
        public int CountAllUpvotes(int trackId) {
            return base.Channel.CountAllUpvotes(trackId);
        }
        
        public System.Threading.Tasks.Task<int> CountAllUpvotesAsync(int trackId) {
            return base.Channel.CountAllUpvotesAsync(trackId);
        }
        
        public int CountAllDownvotes(int trackId) {
            return base.Channel.CountAllDownvotes(trackId);
        }
        
        public System.Threading.Tasks.Task<int> CountAllDownvotesAsync(int trackId) {
            return base.Channel.CountAllDownvotesAsync(trackId);
        }
        
        public RentItMvc.RentItService.Genre[] GetAllGenres() {
            return base.Channel.GetAllGenres();
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Genre[]> GetAllGenresAsync() {
            return base.Channel.GetAllGenresAsync();
        }
        
        public RentItMvc.RentItService.Genre[] GetGenresForChannel(int channelId) {
            return base.Channel.GetGenresForChannel(channelId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Genre[]> GetGenresForChannelAsync(int channelId) {
            return base.Channel.GetGenresForChannelAsync(channelId);
        }
        
        public int GetCountChannelComments(int channelId) {
            return base.Channel.GetCountChannelComments(channelId);
        }
        
        public System.Threading.Tasks.Task<int> GetCountChannelCommentsAsync(int channelId) {
            return base.Channel.GetCountChannelCommentsAsync(channelId);
        }
    }
}
