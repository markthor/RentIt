//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuiTest.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Channel ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DownVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.TrackPlay[] TrackPlaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UpVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Vote[] VotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Channel Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelField, value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((this.ChannelIdField.Equals(value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DownVotes {
            get {
                return this.DownVotesField;
            }
            set {
                if ((this.DownVotesField.Equals(value) != true)) {
                    this.DownVotesField = value;
                    this.RaisePropertyChanged("DownVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.TrackPlay[] TrackPlays {
            get {
                return this.TrackPlaysField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackPlaysField, value) != true)) {
                    this.TrackPlaysField = value;
                    this.RaisePropertyChanged("TrackPlays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UpVotes {
            get {
                return this.UpVotesField;
            }
            set {
                if ((this.UpVotesField.Equals(value) != true)) {
                    this.UpVotesField = value;
                    this.RaisePropertyChanged("UpVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Vote[] Votes {
            get {
                return this.VotesField;
            }
            set {
                if ((object.ReferenceEquals(this.VotesField, value) != true)) {
                    this.VotesField = value;
                    this.RaisePropertyChanged("Votes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Channel", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class Channel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.User ChannelOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Comment[] CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Genre[] GenresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.User[] SubscribersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Track[] TracksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.User ChannelOwner {
            get {
                return this.ChannelOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelOwnerField, value) != true)) {
                    this.ChannelOwnerField = value;
                    this.RaisePropertyChanged("ChannelOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Comment[] Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Genre[] Genres {
            get {
                return this.GenresField;
            }
            set {
                if ((object.ReferenceEquals(this.GenresField, value) != true)) {
                    this.GenresField = value;
                    this.RaisePropertyChanged("Genres");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Hits {
            get {
                return this.HitsField;
            }
            set {
                if ((this.HitsField.Equals(value) != true)) {
                    this.HitsField = value;
                    this.RaisePropertyChanged("Hits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.User[] Subscribers {
            get {
                return this.SubscribersField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscribersField, value) != true)) {
                    this.SubscribersField = value;
                    this.RaisePropertyChanged("Subscribers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Track[] Tracks {
            get {
                return this.TracksField;
            }
            set {
                if ((object.ReferenceEquals(this.TracksField, value) != true)) {
                    this.TracksField = value;
                    this.RaisePropertyChanged("Tracks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackPlay", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class TrackPlay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime TimePlayedk__BackingFieldField;
        
        private int TrackIdk__BackingFieldField;
        
        private GuiTest.ServiceReference1.Track Trackk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TimePlayed>k__BackingField", IsRequired=true)]
        public System.DateTime TimePlayedk__BackingField {
            get {
                return this.TimePlayedk__BackingFieldField;
            }
            set {
                if ((this.TimePlayedk__BackingFieldField.Equals(value) != true)) {
                    this.TimePlayedk__BackingFieldField = value;
                    this.RaisePropertyChanged("TimePlayedk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TrackId>k__BackingField", IsRequired=true)]
        public int TrackIdk__BackingField {
            get {
                return this.TrackIdk__BackingFieldField;
            }
            set {
                if ((this.TrackIdk__BackingFieldField.Equals(value) != true)) {
                    this.TrackIdk__BackingFieldField = value;
                    this.RaisePropertyChanged("TrackIdk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Track>k__BackingField", IsRequired=true)]
        public GuiTest.ServiceReference1.Track Trackk__BackingField {
            get {
                return this.Trackk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Trackk__BackingFieldField, value) != true)) {
                    this.Trackk__BackingFieldField = value;
                    this.RaisePropertyChanged("Trackk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vote", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class Vote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Track TrackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrackIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Track Track {
            get {
                return this.TrackField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackField, value) != true)) {
                    this.TrackField = value;
                    this.RaisePropertyChanged("Track");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackId {
            get {
                return this.TrackIdField;
            }
            set {
                if ((this.TrackIdField.Equals(value) != true)) {
                    this.TrackIdField = value;
                    this.RaisePropertyChanged("TrackId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Channel[] ChannelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Comment[] CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Channel[] SubscribedChannelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Vote[] VotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Channel[] Channels {
            get {
                return this.ChannelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelsField, value) != true)) {
                    this.ChannelsField = value;
                    this.RaisePropertyChanged("Channels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Comment[] Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Channel[] SubscribedChannels {
            get {
                return this.SubscribedChannelsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscribedChannelsField, value) != true)) {
                    this.SubscribedChannelsField = value;
                    this.RaisePropertyChanged("SubscribedChannels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Vote[] Votes {
            get {
                return this.VotesField;
            }
            set {
                if ((object.ReferenceEquals(this.VotesField, value) != true)) {
                    this.VotesField = value;
                    this.RaisePropertyChanged("Votes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class Comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Channel ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Channel Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelField, value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((this.ChannelIdField.Equals(value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Genre", Namespace="http://schemas.datacontract.org/2004/07/RentItServer")]
    [System.SerializableAttribute()]
    public partial class Genre : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuiTest.ServiceReference1.Channel[] ChannelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuiTest.ServiceReference1.Channel[] Channels {
            get {
                return this.ChannelsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelsField, value) != true)) {
                    this.ChannelsField = value;
                    this.RaisePropertyChanged("Channels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRentItService")]
    public interface IRentItService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Login", ReplyAction="http://tempuri.org/IRentItService/LoginResponse")]
        RentItMvc.RentItService.User Login(string usernameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Login", ReplyAction="http://tempuri.org/IRentItService/LoginResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> LoginAsync(string usernameOrEmail, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/SignUp", ReplyAction="http://tempuri.org/IRentItService/SignUpResponse")]
        RentItMvc.RentItService.User SignUp(string usernameOrEmail, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/SignUp", ReplyAction="http://tempuri.org/IRentItService/SignUpResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> SignUpAsync(string usernameOrEmail, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteUser", ReplyAction="http://tempuri.org/IRentItService/DeleteUserResponse")]
        void DeleteUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteUser", ReplyAction="http://tempuri.org/IRentItService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetUser", ReplyAction="http://tempuri.org/IRentItService/GetUserResponse")]
        RentItMvc.RentItService.User GetUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetUser", ReplyAction="http://tempuri.org/IRentItService/GetUserResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.User> GetUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsCorrectPassword", ReplyAction="http://tempuri.org/IRentItService/IsCorrectPasswordResponse")]
        bool IsCorrectPassword(int userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsCorrectPassword", ReplyAction="http://tempuri.org/IRentItService/IsCorrectPasswordResponse")]
        System.Threading.Tasks.Task<bool> IsCorrectPasswordAsync(int userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllUserIds", ReplyAction="http://tempuri.org/IRentItService/GetAllUserIdsResponse")]
        int[] GetAllUserIds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllUserIds", ReplyAction="http://tempuri.org/IRentItService/GetAllUserIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetAllUserIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateUser", ReplyAction="http://tempuri.org/IRentItService/UpdateUserResponse")]
        void UpdateUser(int userId, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateUser", ReplyAction="http://tempuri.org/IRentItService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(int userId, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateChannel", ReplyAction="http://tempuri.org/IRentItService/CreateChannelResponse")]
        int CreateChannel(string channelName, int userId, string description, string[] genres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateChannel", ReplyAction="http://tempuri.org/IRentItService/CreateChannelResponse")]
        System.Threading.Tasks.Task<int> CreateChannelAsync(string channelName, int userId, string description, string[] genres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteChannel", ReplyAction="http://tempuri.org/IRentItService/DeleteChannelResponse")]
        void DeleteChannel(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteChannel", ReplyAction="http://tempuri.org/IRentItService/DeleteChannelResponse")]
        System.Threading.Tasks.Task DeleteChannelAsync(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateChannel", ReplyAction="http://tempuri.org/IRentItService/UpdateChannelResponse")]
        void UpdateChannel(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/UpdateChannel", ReplyAction="http://tempuri.org/IRentItService/UpdateChannelResponse")]
        System.Threading.Tasks.Task UpdateChannelAsync(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannel", ReplyAction="http://tempuri.org/IRentItService/GetChannelResponse")]
        RentItMvc.RentItService.Channel GetChannel(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannel", ReplyAction="http://tempuri.org/IRentItService/GetChannelResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel> GetChannelAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllChannelIds", ReplyAction="http://tempuri.org/IRentItService/GetAllChannelIdsResponse")]
        int[] GetAllChannelIds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetAllChannelIds", ReplyAction="http://tempuri.org/IRentItService/GetAllChannelIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetAllChannelIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannels", ReplyAction="http://tempuri.org/IRentItService/GetChannelsResponse")]
        RentItMvc.RentItService.Channel[] GetChannels(RentItMvc.RentItService.ChannelSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannels", ReplyAction="http://tempuri.org/IRentItService/GetChannelsResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetChannelsAsync(RentItMvc.RentItService.ChannelSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateVote", ReplyAction="http://tempuri.org/IRentItService/CreateVoteResponse")]
        void CreateVote(int rating, int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateVote", ReplyAction="http://tempuri.org/IRentItService/CreateVoteResponse")]
        System.Threading.Tasks.Task CreateVoteAsync(int rating, int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/AddTrack", ReplyAction="http://tempuri.org/IRentItService/AddTrackResponse")]
        void AddTrack(int userId, int channelId, System.IO.MemoryStream audioStream, GuiTest.ServiceReference1.Track trackInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/AddTrack", ReplyAction="http://tempuri.org/IRentItService/AddTrackResponse")]
        System.Threading.Tasks.Task AddTrackAsync(int userId, int channelId, System.IO.MemoryStream audioStream, GuiTest.ServiceReference1.Track trackInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackInfoByStream", ReplyAction="http://tempuri.org/IRentItService/GetTrackInfoByStreamResponse")]
        RentItMvc.RentItService.Track GetTrackInfoByStream(System.IO.MemoryStream audioStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackInfoByStream", ReplyAction="http://tempuri.org/IRentItService/GetTrackInfoByStreamResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Track> GetTrackInfoByStreamAsync(System.IO.MemoryStream audioStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackInfoByTrackname", ReplyAction="http://tempuri.org/IRentItService/GetTrackInfoByTracknameResponse")]
        RentItMvc.RentItService.Track GetTrackInfoByTrackname(int channelId, string trackname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackInfoByTrackname", ReplyAction="http://tempuri.org/IRentItService/GetTrackInfoByTracknameResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Track> GetTrackInfoByTracknameAsync(int channelId, string trackname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/RemoveTrack", ReplyAction="http://tempuri.org/IRentItService/RemoveTrackResponse")]
        void RemoveTrack(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/RemoveTrack", ReplyAction="http://tempuri.org/IRentItService/RemoveTrackResponse")]
        System.Threading.Tasks.Task RemoveTrackAsync(int userId, int trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackIds", ReplyAction="http://tempuri.org/IRentItService/GetTrackIdsResponse")]
        int[] GetTrackIds(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTrackIds", ReplyAction="http://tempuri.org/IRentItService/GetTrackIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetTrackIdsAsync(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTracks", ReplyAction="http://tempuri.org/IRentItService/GetTracksResponse")]
        RentItMvc.RentItService.Track[] GetTracks(int channelId, RentItMvc.RentItService.TrackSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetTracks", ReplyAction="http://tempuri.org/IRentItService/GetTracksResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetTracksAsync(int channelId, RentItMvc.RentItService.TrackSearchArgs args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateComment", ReplyAction="http://tempuri.org/IRentItService/CreateCommentResponse")]
        void CreateComment(string comment, int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/CreateComment", ReplyAction="http://tempuri.org/IRentItService/CreateCommentResponse")]
        System.Threading.Tasks.Task CreateCommentAsync(string comment, int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteComment", ReplyAction="http://tempuri.org/IRentItService/DeleteCommentResponse")]
        void DeleteComment(int channelId, int userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/DeleteComment", ReplyAction="http://tempuri.org/IRentItService/DeleteCommentResponse")]
        System.Threading.Tasks.Task DeleteCommentAsync(int channelId, int userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetComment", ReplyAction="http://tempuri.org/IRentItService/GetCommentResponse")]
        RentItMvc.RentItService.Comment GetComment(int channelId, int userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetComment", ReplyAction="http://tempuri.org/IRentItService/GetCommentResponse")]
        System.Threading.Tasks.Task<RentItMvc.RentItService.Comment> GetCommentAsync(int channelId, int userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsEmailAvailable", ReplyAction="http://tempuri.org/IRentItService/IsEmailAvailableResponse")]
        bool IsEmailAvailable(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsEmailAvailable", ReplyAction="http://tempuri.org/IRentItService/IsEmailAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsEmailAvailableAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsUsernameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsUsernameAvailableResponse")]
        bool IsUsernameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/IsUsernameAvailable", ReplyAction="http://tempuri.org/IRentItService/IsUsernameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subscribe", ReplyAction="http://tempuri.org/IRentItService/SubscribeResponse")]
        void Subscribe(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Subscribe", ReplyAction="http://tempuri.org/IRentItService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Unsubscribe", ReplyAction="http://tempuri.org/IRentItService/UnsubscribeResponse")]
        void Unsubscribe(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/Unsubscribe", ReplyAction="http://tempuri.org/IRentItService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(int userId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannelPort", ReplyAction="http://tempuri.org/IRentItService/GetChannelPortResponse")]
        int GetChannelPort(int channelId, int ipAddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/GetChannelPort", ReplyAction="http://tempuri.org/IRentItService/GetChannelPortResponse")]
        System.Threading.Tasks.Task<int> GetChannelPortAsync(int channelId, int ipAddress, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/ListenToChannel", ReplyAction="http://tempuri.org/IRentItService/ListenToChannelResponse")]
        int ListenToChannel(int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentItService/ListenToChannel", ReplyAction="http://tempuri.org/IRentItService/ListenToChannelResponse")]
        System.Threading.Tasks.Task<int> ListenToChannelAsync(int channelId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRentItServiceChannel : GuiTest.ServiceReference1.IRentItService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RentItServiceClient : System.ServiceModel.ClientBase<GuiTest.ServiceReference1.IRentItService>, GuiTest.ServiceReference1.IRentItService {
        
        public RentItServiceClient() {
        }
        
        public RentItServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentItServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RentItMvc.RentItService.User Login(string usernameOrEmail, string password) {
            return base.Channel.Login(usernameOrEmail, password);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> LoginAsync(string usernameOrEmail, string password) {
            return base.Channel.LoginAsync(usernameOrEmail, password);
        }
        
        public RentItMvc.RentItService.User SignUp(string usernameOrEmail, string email, string password) {
            return base.Channel.SignUp(usernameOrEmail, email, password);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> SignUpAsync(string usernameOrEmail, string email, string password) {
            return base.Channel.SignUpAsync(usernameOrEmail, email, password);
        }
        
        public void DeleteUser(int userId) {
            base.Channel.DeleteUser(userId);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int userId) {
            return base.Channel.DeleteUserAsync(userId);
        }
        
        public RentItMvc.RentItService.User GetUser(int userId) {
            return base.Channel.GetUser(userId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.User> GetUserAsync(int userId) {
            return base.Channel.GetUserAsync(userId);
        }
        
        public bool IsCorrectPassword(int userId, string password) {
            return base.Channel.IsCorrectPassword(userId, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsCorrectPasswordAsync(int userId, string password) {
            return base.Channel.IsCorrectPasswordAsync(userId, password);
        }
        
        public int[] GetAllUserIds() {
            return base.Channel.GetAllUserIds();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllUserIdsAsync() {
            return base.Channel.GetAllUserIdsAsync();
        }
        
        public void UpdateUser(int userId, string username, string password, string email) {
            base.Channel.UpdateUser(userId, username, password, email);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(int userId, string username, string password, string email) {
            return base.Channel.UpdateUserAsync(userId, username, password, email);
        }
        
        public int CreateChannel(string channelName, int userId, string description, string[] genres) {
            return base.Channel.CreateChannel(channelName, userId, description, genres);
        }
        
        public System.Threading.Tasks.Task<int> CreateChannelAsync(string channelName, int userId, string description, string[] genres) {
            return base.Channel.CreateChannelAsync(channelName, userId, description, genres);
        }
        
        public void DeleteChannel(int userId, int channelId) {
            base.Channel.DeleteChannel(userId, channelId);
        }
        
        public System.Threading.Tasks.Task DeleteChannelAsync(int userId, int channelId) {
            return base.Channel.DeleteChannelAsync(userId, channelId);
        }
        
        public void UpdateChannel(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating) {
            base.Channel.UpdateChannel(channelId, ownerId, channelName, description, hits, rating);
        }
        
        public System.Threading.Tasks.Task UpdateChannelAsync(int channelId, System.Nullable<int> ownerId, string channelName, string description, System.Nullable<double> hits, System.Nullable<double> rating) {
            return base.Channel.UpdateChannelAsync(channelId, ownerId, channelName, description, hits, rating);
        }
        
        public RentItMvc.RentItService.Channel GetChannel(int channelId) {
            return base.Channel.GetChannel(channelId);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel> GetChannelAsync(int channelId) {
            return base.Channel.GetChannelAsync(channelId);
        }
        
        public int[] GetAllChannelIds() {
            return base.Channel.GetAllChannelIds();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllChannelIdsAsync() {
            return base.Channel.GetAllChannelIdsAsync();
        }
        
        public RentItMvc.RentItService.Channel[] GetChannels(RentItMvc.RentItService.ChannelSearchArgs args) {
            return base.Channel.GetChannels(args);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Channel[]> GetChannelsAsync(RentItMvc.RentItService.ChannelSearchArgs args) {
            return base.Channel.GetChannelsAsync(args);
        }
        
        public void CreateVote(int rating, int userId, int trackId) {
            base.Channel.CreateVote(rating, userId, trackId);
        }
        
        public System.Threading.Tasks.Task CreateVoteAsync(int rating, int userId, int trackId) {
            return base.Channel.CreateVoteAsync(rating, userId, trackId);
        }
        
        public void AddTrack(int userId, int channelId, System.IO.MemoryStream audioStream, GuiTest.ServiceReference1.Track trackInfo) {
            base.Channel.AddTrack(userId, channelId, audioStream, trackInfo);
        }
        
        public System.Threading.Tasks.Task AddTrackAsync(int userId, int channelId, System.IO.MemoryStream audioStream, GuiTest.ServiceReference1.Track trackInfo) {
            return base.Channel.AddTrackAsync(userId, channelId, audioStream, trackInfo);
        }
        
        public RentItMvc.RentItService.Track GetTrackInfoByStream(System.IO.MemoryStream audioStream) {
            return base.Channel.GetTrackInfoByStream(audioStream);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Track> GetTrackInfoByStreamAsync(System.IO.MemoryStream audioStream) {
            return base.Channel.GetTrackInfoByStreamAsync(audioStream);
        }
        
        public RentItMvc.RentItService.Track GetTrackInfoByTrackname(int channelId, string trackname) {
            return base.Channel.GetTrackInfoByTrackname(channelId, trackname);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Track> GetTrackInfoByTracknameAsync(int channelId, string trackname) {
            return base.Channel.GetTrackInfoByTracknameAsync(channelId, trackname);
        }
        
        public void RemoveTrack(int userId, int trackId) {
            base.Channel.RemoveTrack(userId, trackId);
        }
        
        public System.Threading.Tasks.Task RemoveTrackAsync(int userId, int trackId) {
            return base.Channel.RemoveTrackAsync(userId, trackId);
        }
        
        public int[] GetTrackIds(int channelId) {
            return base.Channel.GetTrackIds(channelId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetTrackIdsAsync(int channelId) {
            return base.Channel.GetTrackIdsAsync(channelId);
        }
        
        public RentItMvc.RentItService.Track[] GetTracks(int channelId, RentItMvc.RentItService.TrackSearchArgs args) {
            return base.Channel.GetTracks(channelId, args);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Track[]> GetTracksAsync(int channelId, RentItMvc.RentItService.TrackSearchArgs args) {
            return base.Channel.GetTracksAsync(channelId, args);
        }
        
        public void CreateComment(string comment, int userId, int channelId) {
            base.Channel.CreateComment(comment, userId, channelId);
        }
        
        public System.Threading.Tasks.Task CreateCommentAsync(string comment, int userId, int channelId) {
            return base.Channel.CreateCommentAsync(comment, userId, channelId);
        }
        
        public void DeleteComment(int channelId, int userId, System.DateTime date) {
            base.Channel.DeleteComment(channelId, userId, date);
        }
        
        public System.Threading.Tasks.Task DeleteCommentAsync(int channelId, int userId, System.DateTime date) {
            return base.Channel.DeleteCommentAsync(channelId, userId, date);
        }
        
        public RentItMvc.RentItService.Comment GetComment(int channelId, int userId, System.DateTime date) {
            return base.Channel.GetComment(channelId, userId, date);
        }
        
        public System.Threading.Tasks.Task<RentItMvc.RentItService.Comment> GetCommentAsync(int channelId, int userId, System.DateTime date) {
            return base.Channel.GetCommentAsync(channelId, userId, date);
        }
        
        public bool IsEmailAvailable(string email) {
            return base.Channel.IsEmailAvailable(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailAvailableAsync(string email) {
            return base.Channel.IsEmailAvailableAsync(email);
        }
        
        public bool IsUsernameAvailable(string username) {
            return base.Channel.IsUsernameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username) {
            return base.Channel.IsUsernameAvailableAsync(username);
        }
        
        public void Subscribe(int userId, int channelId) {
            base.Channel.Subscribe(userId, channelId);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int userId, int channelId) {
            return base.Channel.SubscribeAsync(userId, channelId);
        }
        
        public void Unsubscribe(int userId, int channelId) {
            base.Channel.Unsubscribe(userId, channelId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int userId, int channelId) {
            return base.Channel.UnsubscribeAsync(userId, channelId);
        }
        
        public int GetChannelPort(int channelId, int ipAddress, int port) {
            return base.Channel.GetChannelPort(channelId, ipAddress, port);
        }
        
        public System.Threading.Tasks.Task<int> GetChannelPortAsync(int channelId, int ipAddress, int port) {
            return base.Channel.GetChannelPortAsync(channelId, ipAddress, port);
        }
        
        public int ListenToChannel(int channelId) {
            return base.Channel.ListenToChannel(channelId);
        }
        
        public System.Threading.Tasks.Task<int> ListenToChannelAsync(int channelId) {
            return base.Channel.ListenToChannelAsync(channelId);
        }
    }
}
