Supplementary Specification

Revision History
Version		Date			Description				Author
2			22/02-2013		Added measurability.	Morten Therkildsen

Introduction
This document is the repository of all the RentIt requirements not captured in the functional requirements.

-Functionality
Channels
*Channel owners must be able to assign genre tags to the channels they control/own
*Two users listening to the same channel at the same time must hear the same song with same amount of elapsed time (+- 1s), in other words, a channel is "playing" the same for all listeners.
*A function for searching for channels must be implemented
*A list of the most popular channels should be available to all users. Popularity must be based on an algorithm and it must be explained in the documentation.

Tracks
*The service must support tracks in .mp3 format.

Logging and Error Handling:
*All exceptional states must be logged.
*All state changes must be logged.

Security:
*All usage requires authentication. (usage meaning the use of any services related to the program)

-Usability
The website should be intuitive to use for 90% of persons above 12 with regard to the following:
	~ listening to a channel
	~ maintaining one. 
	~ uploading songs
	~ voting
	~ subscribing
	
*There must be help available for all functions in the form of text. This help must be accessible from within the client
*Users must not be required to subscribe to a channel in order to listen to it. 
*Users must be required to be subscribed to a channel in order to vote on the channel. 
*If a user unsubscribes from a channel, all votes made by that user must be removed so as to not affect track ordering
*Users must be able to see all the songs contained in a channel
*Users must be able to upvote and downvote the last 5 songs that have been played on the channel while they were listening
*Users must not be required to download or install any third party software in order to listen to a channel

*No operation, other than uploading a track, must exceed 1000ms

-Reliability
The server must not be affected by any errors clientside

*All operations requires internet connection
*No system failure of any kind should affect any track in the persistence storage
*If a channel on the server crashes:
	~ all clients must be notified about the failure.
	~ the website must not be affected by the crash 
	~ the website must refresh the website with possiblity to listen to the channel greyed out until the channel have been fully recovered on the server side. 
	~ on the server side, the channel stream must shut down
	~ the error must be logged and reported automatically. 
	~ The channel must be safe to use again when all songs identity have been confirmed(via hashing), and none of them are in use
*If upload of a track for fails, everything about the track must be removed from the server and the user must be notified

-Performance
Users must be able to browse the site without too long response time (time for processing a user operation on server must not exceed 1000ms)

*Listening to a channel must be possible without lag from the server and website(we cannot guarntee no lag if the client have a bad webconnection)

*The server must be able to stream serveral channels at the same time to serveral users
*A single user must only be able to listen to one channel at a time

-Supportability
The server and website must be easy to maintain and extend.
This means that extensions such as video streaming or downloading of media must not requrie extensive changes in the system architecture.
Extensions such as facebook or twitter integration must be easy to implement on the website

*The server will be running on Windows 7 OS with support of .NET 4.0 Framework.
*Clients should be able to use whatever popular browser they wish(less know browsers might work, but we won't make sure of it)


-Implementaion
The server will be written in C# with the .NET 4.0 Framework and Windows Communication Foundtaion
The website will be written in ASP.NET and must work in all popular browsers

-Legal
(This section should be written by a pro dude!)